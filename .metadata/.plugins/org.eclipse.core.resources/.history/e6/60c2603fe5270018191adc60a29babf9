package ar.com.mateo.tpfinal.ui;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.EventQueue;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.border.EmptyBorder;

import ar.com.mateo.tpfinal.jdbc.*;
import ar.com.mateo.tpfinal.model.*;

public class VentanaPrincipal extends JFrame implements EstadoOperacion {

	private static final long serialVersionUID = 3447259289502600218L;
	private JPanel contentPane;
	private JTable table;

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					VentanaPrincipal frame = new VentanaPrincipal();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the frame.
	 */
	public VentanaPrincipal() {
		setTitle("Administración de Productos");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 729, 426);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		contentPane.setLayout(new BorderLayout(0, 0));
		setContentPane(contentPane);

		JPanel panelBotones = new JPanel();
		FlowLayout fl_panelBotones = (FlowLayout) panelBotones.getLayout();
		fl_panelBotones.setAlignment(FlowLayout.RIGHT);
		contentPane.add(panelBotones, BorderLayout.SOUTH);
		
		JButton btnRefrescaLista = new JButton("Refresca Lista");
		btnRefrescaLista.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				refrescar();
			}
		});
		btnRefrescaLista.setBackground(new Color(238, 238, 238));
		panelBotones.add(btnRefrescaLista);

		JButton btnNuevo = new JButton("Nuevo");
		btnNuevo.setBackground(Color.GREEN);
		panelBotones.add(btnNuevo);

		JButton btnModifica = new JButton("Modifica");
		btnModifica.setBackground(Color.PINK);
		btnModifica.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				modificar();

			}
		});
		panelBotones.add(btnModifica);

		JButton btnElimina = new JButton("Eliminar");
		btnElimina.setBackground(Color.RED);
		btnElimina.setForeground(Color.BLACK);
		btnElimina.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				eliminar();
			}
		});
		panelBotones.add(btnElimina);

		JScrollPane scrollPane = new JScrollPane();
		contentPane.add(scrollPane, BorderLayout.CENTER);

		table = new JTable();
		scrollPane.setViewportView(table);

		btnNuevo.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				agregar();

			}
		});

		table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		refrescar();
	}

	private void agregar() {
		try {
			AgregaModificaProducto dialog = new AgregaModificaProducto(this, this, null);
			dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
			dialog.setVisible(true);
		} catch (Exception e1) {
			JOptionPane.showMessageDialog(this, "Problemas cargando formulario de nuevo producto.\n" + e1.getMessage(),
					"Error", JOptionPane.ERROR_MESSAGE);
		}
	}

	private void eliminar() {
		if (table.getSelectedRow() == -1) {
			JOptionPane.showMessageDialog(this, "Debe seleccionar un producto", "Error",
					JOptionPane.INFORMATION_MESSAGE);
			return;
		}
		Producto p = ((ModeloTablaProductos) table.getModel()).getLista().get(table.getSelectedRow());
		if (JOptionPane.showConfirmDialog(this, "Está segur@ que desea eliminar el producto '" + p.getProducto() + "'?",
				"Eliminar", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION) {
			try {
				dao.delete(p);
				refrescar();
			} catch (PersistenciaException e) {
				JOptionPane.showMessageDialog(this, "Problemas eliminando producto.\n"+e.getMessage(), "Error",
						JOptionPane.ERROR_MESSAGE);
			}
		}
	}

	private void modificar() {
		if (table.getSelectedRow() == -1) {
			JOptionPane.showMessageDialog(this, "Debe seleccionar un producto", "Error",
					JOptionPane.INFORMATION_MESSAGE);
			return;
		}
		Producto p = ((ModeloTablaProductos) table.getModel()).getLista().get(table.getSelectedRow());
		AgregaModificaProducto dialog;
		try {
			dialog = new AgregaModificaProducto(this, this, p);
			dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
			dialog.setVisible(true);
		} catch (PersistenciaException e) {
			JOptionPane.showMessageDialog(this, "Problemas cargando formulario de edición.\n" + e.getMessage(), "Error",
					JOptionPane.ERROR_MESSAGE);
		}

	}

	private ProductoDAO dao = new ProductoDAO();

	@Override
	public void refrescar() {
		try {
			table.setModel(new ModeloTablaProductos(dao.list()));
		} catch (PersistenciaException e) {
			JOptionPane.showMessageDialog(this, "Problemas cargando productos.\n" + e.getMessage(), "Error",
					JOptionPane.ERROR_MESSAGE);
		}

	}

}