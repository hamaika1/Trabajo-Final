package proyectoejemplo.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JOptionPane;

import proyectoejemplo.modelo.Persona;


public class PersonaDAO {
	Conector conector;
	Connection conexion = null;
	Statement stmt = null;
	ResultSet rs = null;
	
	public Persona save(Persona p) {
		try {
			conector = new Conector();
			conexion = conector.getConexion();
			String sql = "INSERT INTO persona (dni, nombre, apellidos, edad, casado) VALUES (?,?,?,?,?)";
			PreparedStatement ps = conexion.prepareStatement(sql,
					 Statement.RETURN_GENERATED_KEYS);
			ps.setString(1, p.getDni());
			ps.setString(2, p.getNombre());
			ps.setString(3, p.getApellidos());
			ps.setInt(4, p.getEdad());
			ps.setBoolean(5, p.isCasado());
			ps.execute();
			
			ResultSet tableKeys = ps.getGeneratedKeys();
			tableKeys.next();
			int autoGeneratedID = tableKeys.getInt(1);
			
			ps.close();
			conector.closeConexion();
			
			p.setId(autoGeneratedID);
			return p;
			
		} catch (SQLException e) {
			JOptionPane.showMessageDialog(null, "Se produjo un error al querer insertar la persona " + p.getNombre(), "Error",
					JOptionPane.ERROR_MESSAGE);
			return null;
		}
		
	}
	
	public Persona load(String dni) {
		try {
			conector = new Conector();
			conexion = conector.getConexion();
			String sql = "SELECT * FROM persona "
					+ "WHERE persona.dni like ?";
			
			PreparedStatement ps = conexion.prepareStatement(sql);
			ps.setString(1, "%" + dni + "%");
			ResultSet rs = ps.executeQuery();
			Persona p = new Persona();

			if (rs.next()) {
				p.setId(rs.getInt("persona.id"));
				p.setNombre(rs.getString("persona.nombre"));
				p.setApellidos(rs.getString("persona.apellidos"));
				p.setEdad(rs.getInt("persona.edad"));
				p.setCasado(rs.getBoolean("persona.casado"));
				p.setDni(dni);
			}
			rs.close();
			ps.close();
			conector.closeConexion();
			return p;
		} catch (SQLException e) {
			JOptionPane.showMessageDialog(null, "Se produjo un error al querer obtener la persona especificada",
					"Error", JOptionPane.WARNING_MESSAGE);
		}
		return null;
	}
	
	public void update(Persona p) {
		try {
			conector = new Conector();
			conexion = conector.getConexion();
			String sql = "UPDATE persona SET nombre = ?, apellidos = ?, casado = ?, edad = ?, dni = ? WHERE id = ?";
			PreparedStatement ps = conexion.prepareStatement(sql);
			ps.setString(1,  p.getNombre());
			ps.setString(2,  p.getApellidos());
			ps.setBoolean(3, p.isCasado());
			ps.setInt(4, p.getEdad());
			ps.setString(5, p.getDni());
			ps.setInt(6, p.getId());
			ps.execute();
			ps.close();
			conector.closeConexion();
		} catch (SQLException e) {
			JOptionPane.showMessageDialog(null, "Se produjo un error al querer actualizar una persona", "Error",
					JOptionPane.WARNING_MESSAGE);
		}
	}
	
	public void delete(Persona p) {

		String sql = "DELETE FROM persona WHERE id = ?";
		PreparedStatement ps;
		try {
			conector = new Conector();
			conexion = conector.getConexion();
			ps = conexion.prepareStatement(sql);
			ps.setInt(1, p.getId());
			ps.execute();
			ps.close();
			
		}catch (SQLException e) {
			JOptionPane.showMessageDialog(null, "Se produjo un error al querer eliminar la Aeronave especificada.",
					"Error", JOptionPane.ERROR_MESSAGE);
		} finally {
			conector.closeConexion();
		}
	}	
	
	public List<Persona> list() {

		List<Persona> listaPersonas = new ArrayList<Persona>();
		String sql = "SELECT * FROM persona ORDER BY nombre";
		PreparedStatement ps;
		
		try {
			conector = new Conector();
			conexion = conector.getConexion();
			ps = conexion.prepareStatement(sql);
			ResultSet rs = ps.executeQuery();
			while (rs.next()) {
				Persona p = new Persona();
				p.setNombre(rs.getString("persona.nombre"));
				p.setApellidos(rs.getString("persona.apellidos"));
				p.setEdad(rs.getInt("persona.edad"));
				p.setCasado(rs.getBoolean("persona.casado"));
				p.setDni(rs.getString("persona.dni"));
				p.setId(rs.getInt("persona.id"));
				listaPersonas.add(p);
			}
			rs.close();
			ps.close();
			return listaPersonas;
		} catch (SQLException e) {
			JOptionPane.showMessageDialog(null, "Se produjo un error al querer acceder a las personas especificadas",
					"Error", JOptionPane.ERROR_MESSAGE);
		} finally {
			conector.closeConexion();
		}
		
		return null;
	}

}
